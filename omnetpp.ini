[General]

network = LoRa
#repeat = 10
#seed-set = ${processid}	#modify the seed start value so that it is different at each run.
#debug-on-errors = true
#record-eventlog = true
#seed-set = ${53542} #${87174}#
#outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
#outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
[Config LoRaSim-MinimalTopology]
LoRa.slotTime = 0    # no slots- pure Aloha
LoRa.dutyCycleActive = true
LoRa.**.isBufferingEvents = false

sim-time-limit = 864000s #6000000s #5184000s #2592000s #864000s # 10000s 
#LoRa.host[*].nbOfChannels = ${nbOfChannels=3,8}
LoRa.*.nbOfChannels =3

#LoRa.minR = ${minR=0..1040.5 step 208.1}m
#LoRa.numHosts = ${N=0..2000 step 200}

#LoRa.minR = 1040.5m#832.4m#624.3m #416.2m#208.1m#0m#minimum distance between BS and any other node; default(500m)
#LoRa.**.sfNetR = 12 #this controls the coordinates of interferer to be randomly picked; default(12) representing entire network raidus for all coverage

#LoRa.numHosts7 = 0 #${N=0..2000 step 200} #LoRa.numHosts7 = 1455#0
#LoRa.minR = ${minR=0..1040.5 step 208.1}m //relative Distance
#LoRa.minR = ${minR=0..1040.5 step 100}m # ${minR=1040.5}m #real Distance 
#LoRa.minR = ${minR=1040.5}m
LoRa.minR = ${minR=0}m
#LoRa.numHosts7 =${N=0..2000 step 200} #${N=1000}# $${N=0..400000 step 50000} #
LoRa.numHosts7 = ${N=1000}#0#1455
LoRa.hostSF7[*].hostType = 0
#LoRa.hostSF7[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)


LoRa.numHosts8 = 0#768
#LoRa.minR = ${minR=0..1373.82 step 274.764}m
#LoRa.minR = ${minR=0..1373.82 step 100}m # 1373.82m #real distance
#LoRa.minR = ${minR=0..1373.82 step 100}m #1373.82m # real distance
#LoRa.minR = ${minR=1373.82}m#${minR=0}m #
#LoRa.numHosts8 = ${N=0..200000 step 20000} #${N=50}${N=0..1100 step 100} #${N=749.6}#
#LoRa.numHosts8 = ${N=1400..1500 step 100}
#LoRa.hostSF8[*].hostType =0
#LoRa.hostSF8[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)

LoRa.numHosts9 = 0#410
#LoRa.minR = ${minR=0..1822.95 step 364.59}m
#LoRa.minR = ${minR=0..1822.95 step 100}m #real distance
#LoRa.minR = ${minR=1822.95}m
#LoRa.numHosts9 = ${N=0..1000 step 100}
#LoRa.hostSF9[*].hostType = 0
#LoRa.hostSF9[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)

LoRa.numHosts10 = 0#225
#LoRa.minR = ${minR=0..2406.94 step 481.388}m
#LoRa.minR = ${minR=0..2406.94 step 100}m #real distance
#LoRa.minR = ${minR=2406.94}m
#LoRa.numHosts10 = ${N=0..500 step 50}
#LoRa.hostSF10[*].hostType = 0
#LoRa.hostSF10[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)
  
LoRa.numHosts11 = 0#124
#LoRa.minR = ${minR=0..3193.82 step 638.764}m
#LoRa.minR = ${minR=0..3193.82 step 100}m #real distance
#LoRa.minR = ${minR=3193.82}m
#LoRa.numHosts11 = ${N=0..300 step 30}
#LoRa.hostSF11[*].hostType = 0
#LoRa.hostSF11[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)
  

#LoRa.minR = ${minR=3193.82}m
#LoRa.numHosts11 = ${N=0..200 step 50}

LoRa.numHosts12 = 0#60
##LoRa.minR = 0 #${minR=0..4259.03 step 851.806}m #relative distance
##LoRa.minR = ${minR=0..4259.03 step 100}m #real Distance
#LoRa.minR = ${minR=4259.03}m#
#LoRa.numHosts12 =  ${N=0..100 step 10}
#LoRa.hostSF12[*].hostType = 0
##LoRa.hostSF12[*].hostType = index < (${N}*50)/100 ?  0:1 #50% LoRaHosts(0) and 50% ICSLoRaHosts(1)

#Installed Application for hosts on all SF networks [home security 20B every 10min]
LoRa.**.iaTime = exponential(600s) # exponential(43200s) #exponential(86400s) 
LoRa.**.pkLenBits = 160b #64b 
LoRa.**.addFrameHeader = true #provided application payload includes MAC headers (minimum 13B)

#PathLoss Model Parameters
LoRa.**.Ptx_ed = 14 #Transmission Power (dBm)
LoRa.server.Gant = 2 #Antenna Gain
LoRa.server.K = 128.95  #Intercept of Pathloss model (dB)
LoRa.server.NF = 6 #Noise Figure (dB)
LoRa.**.pathlossExp = 2.32
LoRa.**.shadowingParamater = normal(0,7.8) #shadowingParameter
LoRa.**.interShadowingParamater = 0


#Interference Model
LoRa.server.BER = 5 #BER={3,4,5}   3->(10^-3),4->(10^-3),5->(10^-3)

#Transmission Frame header parameters corresponding to physical layer packet
LoRa.**.CRC = 1
LoRa.**.IH = 0
LoRa.**.CR = 1
LoRa.**.DE = 0
LoRa.**.Nprog = 8

#LoRa.interferer1.meanArrivalRate = 0.8
#LoRa.interferer1.txPower = 10
#LoRa.interferer1.B = 100
#LoRa.interferer1.txLength = 5

#Server positioning and network setup 
LoRa.netR = 4259.03m # 1040.5 m # 1373.82 m #1822.95m #2406.94m #3193.82m #2406.94m #4259.03m # #10880.2 m # (SF12_n2.32) ##6333.83m #(SF12_n=3) ##5001 m   #2711.38m #(SF7_n=2.32) ## 2711.38 m# 1822.95m #1373.82 m #
LoRa.server.x = 0
LoRa.server.y = 0
LoRa.*.BW = 125000 Hz

#animation parameters
**.animationHoldTimeOnCollision = 0s
**.idleAnimationSpeed = 1
**.transmissionEdgeAnimationSpeed = 1e-6
**.midTransmissionAnimationSpeed = 1e-1

#LoRa.numHosts = ${N=15708 62832..78540 step 15708}
#LoRa.numHosts = ${N=15708..78540 step 15708}

#LoRa.numHosts = ${N=0, 3929, 7858, 11787, 15716, 19645, 23574,27503, 31432, 47124, 62832, 78540}
#LoRa.numHosts = ${N=1000}

#${N=0..78540 step 15708}
#LoRa.numHosts = ${N=0..35358 step 3929}


#LoRa.numHosts = ${N=117810..353430 step 39270} 
#LoRa.numHosts = 31416 #47124 #78540 #

#LoRa.numHosts = 10
#LoRa.server.numHosts = 100
#LoRa.host[*].CR = 1

###app1 [20B every 10 mintues]
#LoRa.numHosts = ${N=0..196350 step 39270} 
#LoRa.numHosts = ${N=235620..353430 step 39270}
#LoRa.numHosts = ${N=0..78540 step 15708}
#LoRa.host[*].iaTime = 600s
#LoRa.host[*].pkLenBits = 160b

##app2
#LoRa.host[*].iaTime = exponential(86400s) 
#LoRa.host[*].pkLenBits =64b #8B

####app3
#LoRa.host[*].iaTime = exponential(60s) 
#LoRa.host[*].pkLenBits =8b #in bits

#app4
#LoRa.host[*].iaTime = exponential(1800s) 
#LoRa.host[*].pkLenBits =192b

###app5
#LoRa.host[*].iaTime = exponential(30s) 
#LoRa.host[*].pkLenBits =8b

#test1 (app1 - app3)
#LoRa.host[*].iaTime = index < (${N}*50)/100 ?  exponential(600s):exponential(60s) 
#LoRa.host[*].pkLenBits = index < (${N}*50)/100 ?  160b :8b
 
#test2 (app2 - app3)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(86400s):exponential(60s) 
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  64b :8b 

#test3 (app1 - app2)
#LoRa.host[*].iaTime = index < (${N}*20)/100 ?  exponential(600s):exponential(86400s) 
#LoRa.host[*].pkLenBits = index < (${N}*20)/100 ?  160b :64b 

##test4 (app1 - app4)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(600s):exponential(1800s)
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  160b :192b

##test5 (app1 - app5)
#LoRa.host[*].iaTime = index < (${N}*50)/100 ?  exponential(600s):exponential(30s) 
#LoRa.host[*].pkLenBits = index < (${N}*50)/100 ?  160b :8b

##test6 (app2 - app4)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(86400s):exponential(1800s) 
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  64b :192b

##test7 (app2 - app5)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(86400s):exponential(30s) 
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  64b :8b

###test8 (app3 - app4)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(60s):exponential(1800s)
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  8b :192b

###test9 (app3 - app5)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(60s):exponential(30s)
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  8b :8b

###test10 (app4 - app5)
#LoRa.host[*].iaTime = index < (${N}*80)/100 ?  exponential(1800s):exponential(30s)
#LoRa.host[*].pkLenBits = index < (${N}*80)/100 ?  192b :8b

#testing-initially 
#LoRa.numHosts = 20
#LoRa.host[*].iaTime = index < (numHosts)/2 ? exponential(60s) : exponential(600s)
#LoRa.host[*].pkLenBits = index < (numHosts)/2 ? 8b : 160b

#
#LoRa.host[0..199].iaTime = exponential(60s)
#LoRa.host[0..199].pkLenBits = 8b
#
#LoRa.host[200..999].iaTime = exponential(600s) 
#LoRa.host[200..999].pkLenBits = 160b



#app1 - home security

#LoRa.host[0..numHosts/2].iaTime = 600s #exponential(2s)#2s #600s
#LoRa.host[0..numHosts/2].pkLenBits = 160b #7B data + 13B header #absolute application data bits #952b #=119 bytes, so that (with +1 byte guard) slotTime is a nice round number

#LoRa.numHosts = ${N=39270..353430 step 39270} 
##LoRa.numHosts = 235620
#sim-time-limit = 432000s
###
#LoRa.host[*].nbOfChannels = 3
##LoRa.host[*].nbOfChannels = ${nbOfChannels=8,3..4 step 1}
#LoRa.host[*].iaTime = exponential(600s) #10 minutes 
#LoRa.host[*].pkLenBits =160b

#app2 - Home Appliances
##LoRa.numHosts = ${N=39270..353430 step 39270} 
#LoRa.numHosts = 10
#sim-time-limit = 432000s
######
#LoRa.host[*].nbOfChannels = 3
####LoRa.host[*].nbOfChannels = ${nbOfChannels=8,3..4 step 1}
#LoRa.host[*].iaTime = exponential(86400s) #10 minutes 
#LoRa.host[*].pkLenBits =64b

#app3 - Traffic Light or Traffic Sensors
#LoRa.numHosts = ${N=3927..35343 step 3927} 
##LoRa.numHosts = 3927
#sim-time-limit = 432000s
#
#LoRa.host[*].nbOfChannels = 3
##LoRa.host[*].nbOfChannels = ${nbOfChannels=8,3..4 step 1}
#LoRa.host[*].iaTime = exponential(60s) #600s
#LoRa.host[*].pkLenBits =8b








